// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/bruhng/distributed-sketching/proto (interfaces: SketcherClient)
//
// Generated by this command:
//
//	mockgen . SketcherClient
//

// Package mock_proto is a generated GoMock package.
package mock_proto

import (
	context "context"
	reflect "reflect"

	proto "github.com/bruhng/distributed-sketching/proto"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockSketcherClient is a mock of SketcherClient interface.
type MockSketcherClient struct {
	ctrl     *gomock.Controller
	recorder *MockSketcherClientMockRecorder
	isgomock struct{}
}

// MockSketcherClientMockRecorder is the mock recorder for MockSketcherClient.
type MockSketcherClientMockRecorder struct {
	mock *MockSketcherClient
}

// NewMockSketcherClient creates a new mock instance.
func NewMockSketcherClient(ctrl *gomock.Controller) *MockSketcherClient {
	mock := &MockSketcherClient{ctrl: ctrl}
	mock.recorder = &MockSketcherClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSketcherClient) EXPECT() *MockSketcherClientMockRecorder {
	return m.recorder
}

// BadCount mocks base method.
func (m *MockSketcherClient) BadCount(ctx context.Context, in *proto.BadArray, opts ...grpc.CallOption) (*proto.MergeReply, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BadCount", varargs...)
	ret0, _ := ret[0].(*proto.MergeReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BadCount indicates an expected call of BadCount.
func (mr *MockSketcherClientMockRecorder) BadCount(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BadCount", reflect.TypeOf((*MockSketcherClient)(nil).BadCount), varargs...)
}

// BadKll mocks base method.
func (m *MockSketcherClient) BadKll(ctx context.Context, in *proto.BadArray, opts ...grpc.CallOption) (*proto.MergeReply, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BadKll", varargs...)
	ret0, _ := ret[0].(*proto.MergeReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BadKll indicates an expected call of BadKll.
func (mr *MockSketcherClientMockRecorder) BadKll(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BadKll", reflect.TypeOf((*MockSketcherClient)(nil).BadKll), varargs...)
}

// MergeCount mocks base method.
func (m *MockSketcherClient) MergeCount(ctx context.Context, in *proto.CountSketch, opts ...grpc.CallOption) (*proto.MergeReply, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MergeCount", varargs...)
	ret0, _ := ret[0].(*proto.MergeReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MergeCount indicates an expected call of MergeCount.
func (mr *MockSketcherClientMockRecorder) MergeCount(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MergeCount", reflect.TypeOf((*MockSketcherClient)(nil).MergeCount), varargs...)
}

// MergeKll mocks base method.
func (m *MockSketcherClient) MergeKll(ctx context.Context, in *proto.KLLSketch, opts ...grpc.CallOption) (*proto.MergeReply, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MergeKll", varargs...)
	ret0, _ := ret[0].(*proto.MergeReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MergeKll indicates an expected call of MergeKll.
func (mr *MockSketcherClientMockRecorder) MergeKll(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MergeKll", reflect.TypeOf((*MockSketcherClient)(nil).MergeKll), varargs...)
}

// PlotKll mocks base method.
func (m *MockSketcherClient) PlotKll(ctx context.Context, in *proto.PlotRequest, opts ...grpc.CallOption) (*proto.PlotKllReply, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PlotKll", varargs...)
	ret0, _ := ret[0].(*proto.PlotKllReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PlotKll indicates an expected call of PlotKll.
func (mr *MockSketcherClientMockRecorder) PlotKll(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PlotKll", reflect.TypeOf((*MockSketcherClient)(nil).PlotKll), varargs...)
}

// QueryCount mocks base method.
func (m *MockSketcherClient) QueryCount(ctx context.Context, in *proto.NumericValue, opts ...grpc.CallOption) (*proto.CountQueryReply, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryCount", varargs...)
	ret0, _ := ret[0].(*proto.CountQueryReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryCount indicates an expected call of QueryCount.
func (mr *MockSketcherClientMockRecorder) QueryCount(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryCount", reflect.TypeOf((*MockSketcherClient)(nil).QueryCount), varargs...)
}

// QueryKll mocks base method.
func (m *MockSketcherClient) QueryKll(ctx context.Context, in *proto.NumericValue, opts ...grpc.CallOption) (*proto.QueryReturn, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryKll", varargs...)
	ret0, _ := ret[0].(*proto.QueryReturn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryKll indicates an expected call of QueryKll.
func (mr *MockSketcherClientMockRecorder) QueryKll(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryKll", reflect.TypeOf((*MockSketcherClient)(nil).QueryKll), varargs...)
}

// RestartServer mocks base method.
func (m *MockSketcherClient) RestartServer(ctx context.Context, in *proto.EmptyMessage, opts ...grpc.CallOption) (*proto.EmptyMessage, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RestartServer", varargs...)
	ret0, _ := ret[0].(*proto.EmptyMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestartServer indicates an expected call of RestartServer.
func (mr *MockSketcherClientMockRecorder) RestartServer(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestartServer", reflect.TypeOf((*MockSketcherClient)(nil).RestartServer), varargs...)
}

// ReverseQueryKll mocks base method.
func (m *MockSketcherClient) ReverseQueryKll(ctx context.Context, in *proto.ReverseQuery, opts ...grpc.CallOption) (*proto.NumericValue, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReverseQueryKll", varargs...)
	ret0, _ := ret[0].(*proto.NumericValue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReverseQueryKll indicates an expected call of ReverseQueryKll.
func (mr *MockSketcherClientMockRecorder) ReverseQueryKll(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReverseQueryKll", reflect.TypeOf((*MockSketcherClient)(nil).ReverseQueryKll), varargs...)
}

// TestLatency mocks base method.
func (m *MockSketcherClient) TestLatency(ctx context.Context, in *proto.EmptyMessage, opts ...grpc.CallOption) (*proto.EmptyMessage, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TestLatency", varargs...)
	ret0, _ := ret[0].(*proto.EmptyMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TestLatency indicates an expected call of TestLatency.
func (mr *MockSketcherClientMockRecorder) TestLatency(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TestLatency", reflect.TypeOf((*MockSketcherClient)(nil).TestLatency), varargs...)
}
